{"version":3,"sources":["components/TodoList.js","App.js","index.js"],"names":["TodoList","useState","isOpen","setIsOpen","isChecked","setIsChecked","id","setId","item","setItem","items","setItems","useEffect","todos","columns","key","name","fieldName","minWidth","maxWidth","isResizable","onRender","selectedItem","Button","buttonType","ButtonType","primary","onClick","complete","handleChange","e","prevItem","target","value","data-is-scrollable","className","DetailsList","selectionMode","Dialog","type","DialogType","close","title","isBlocking","closeButtonAriaLabel","onSubmit","preventDefault","created_at","map","TextField","label","onChange","styles","root","Checkbox","checked","marginTop","backgroundColor","paddingTop","paddingBottom","paddingLeft","checkmark","DialogFooter","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kjBAiJeA,EAtIE,WAAO,IAAD,EACOC,oBAAS,GADhB,mBACdC,EADc,KACNC,EADM,OAEaF,oBAAS,GAFtB,mBAEdG,EAFc,KAEHC,EAFG,OAGDJ,mBAAS,IAHR,mBAGdK,EAHc,KAGVC,EAHU,OAIGN,mBAAS,IAJZ,mBAIdO,EAJc,KAIRC,EAJQ,OAKKR,mBAAS,IALd,mBAKdS,EALc,KAKPC,EALO,KAOrBC,qBAAU,WACRD,EAASE,KACR,IAEH,IAAMC,EAAU,CACd,CACEC,IAAK,QACLC,KAAM,QACNC,UAAW,QACXC,SAAU,IACVC,SAAU,IACVC,aAAa,GAEf,CACEL,IAAK,SACLC,KAAM,SACNC,UAAW,WACXC,SAAU,IACVC,SAAU,IACVC,aAAa,GAEf,CACEL,IAAK,aACLC,KAAM,eACNC,UAAW,aACXC,SAAU,IACVC,SAAU,IACVC,aAAa,GAEf,CACEL,IAAK,OACLC,KAAM,OACNC,UAAW,OACXG,aAAa,EACbC,SAAU,SAAAC,GAAY,OACpB,kBAACC,EAAA,EAAD,CACEC,WAAYC,IAAWC,QACvBC,QAAS,WACPlB,EAAQa,GACRf,EAAMe,EAAahB,IACnBD,EAAaiB,EAAaM,UAC1BzB,GAAU,KANd,WA0BA0B,EAAe,SAAAC,GACnBrB,GAAQ,SAAAsB,GACN,OAAO,2BAAKA,GAAZ,kBAAuBD,EAAEE,OAAOhB,KAAOc,EAAEE,OAAOC,YAkBpD,OACE,yBAAKC,sBAAoB,GACvB,yBAAKC,UAAU,4BACb,kBAACC,EAAA,EAAD,CAAa1B,MAAOA,EAAOI,QAASA,EAASuB,cAAe,KAE9D,kBAACC,EAAA,EAAD,CACEpC,OAAQA,EACRqC,KAAMC,IAAWC,MACjBC,MAAM,YACNC,YAAY,EACZC,qBAAqB,SAErB,0BAAMC,SA1BS,SAAAf,GACnBA,EAAEgB,iBACF,IAAMJ,EAAQZ,EAAEE,OAAOU,MAAMT,MACvBc,EAAajB,EAAEE,OAAOe,WAAWd,MACjCL,EAAWxB,EAEjBO,EACED,EAAMsC,KAAI,SAAAxC,GAAI,OACZA,EAAKF,KAAOA,EAAZ,2BAAsBE,GAAtB,IAA4BkC,QAAOd,WAAUmB,eAAevC,MAGhEL,GAAU,KAgBJ,kBAAC8C,EAAA,EAAD,CACEC,MAAM,SACNlC,KAAK,QACLiB,MAAOzB,EAAKkC,MACZS,SAAUtB,EACVuB,OAAQ,CAAEC,KAAM,CAAElC,SAAU,YAE9B,kBAAC8B,EAAA,EAAD,CACEC,MAAM,gBACNlC,KAAK,aACLiB,MAAOzB,EAAKuC,WACZI,SAAUtB,EACVuB,OAAQ,CAAEC,KAAM,CAAElC,SAAU,YAE9B,kBAACmC,EAAA,EAAD,CACEJ,MAAM,WACNlC,KAAK,WACLmC,SAAU,kBAAM9C,GAAcD,IAC9BmD,QAASnD,EACTgD,OA/DG,CACXC,KAAM,CACJG,UAAW,OACXC,gBAAiB,UACjBC,WAAY,OACZC,cAAe,OACfC,YAAa,QAEfC,UAAW,MAyDL,kBAACC,EAAA,EAAD,KACE,kBAACvC,EAAA,EAAD,CAAQC,WAAYC,IAAWC,QAASa,KAAK,UAA7C,MAGA,kBAAChB,EAAA,EAAD,CAAQI,QAAS,kBAAMxB,GAAU,KAAjC,eClIG4D,MAJf,WACE,OAAO,kBAAC,EAAD,OCATC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.46389c30.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { DetailsList, Checkbox } from \"@fluentui/react\";\nimport {\n  Dialog,\n  DialogType,\n  DialogFooter\n} from \"office-ui-fabric-react/lib/Dialog\";\nimport { Button, ButtonType } from \"office-ui-fabric-react/lib/Button\";\nimport { TextField } from \"office-ui-fabric-react/lib/TextField\";\nimport todos from \"../data/todos\";\n\nconst TodoList = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isChecked, setIsChecked] = useState(false);\n  const [id, setId] = useState(\"\");\n  const [item, setItem] = useState(\"\");\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    setItems(todos);\n  }, []);\n\n  const columns = [\n    {\n      key: \"title\",\n      name: \"Title\",\n      fieldName: \"title\",\n      minWidth: 100,\n      maxWidth: 300,\n      isResizable: true\n    },\n    {\n      key: \"status\",\n      name: \"Status\",\n      fieldName: \"complete\",\n      minWidth: 100,\n      maxWidth: 300,\n      isResizable: true\n    },\n    {\n      key: \"created_at\",\n      name: \"Date Created\",\n      fieldName: \"created_at\",\n      minWidth: 100,\n      maxWidth: 300,\n      isResizable: true\n    },\n    {\n      key: \"edit\",\n      name: \"Edit\",\n      fieldName: \"edit\",\n      isResizable: false,\n      onRender: selectedItem => (\n        <Button\n          buttonType={ButtonType.primary}\n          onClick={() => {\n            setItem(selectedItem);\n            setId(selectedItem.id);\n            setIsChecked(selectedItem.complete);\n            setIsOpen(true);\n          }}\n        >\n          Edit\n        </Button>\n      )\n    }\n  ];\n\n  let styles = {\n    root: {\n      marginTop: \"10px\",\n      backgroundColor: \"#8CC152\",\n      paddingTop: \"10px\",\n      paddingBottom: \"10px\",\n      paddingLeft: \"10px\"\n    },\n    checkmark: {}\n  };\n\n  const handleChange = e => {\n    setItem(prevItem => {\n      return { ...prevItem, [e.target.name]: e.target.value };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const title = e.target.title.value;\n    const created_at = e.target.created_at.value;\n    const complete = isChecked;\n\n    setItems(\n      items.map(item =>\n        item.id === id ? { ...item, title, complete, created_at } : item\n      )\n    );\n    setIsOpen(false);\n  };\n\n  return (\n    <div data-is-scrollable={true}>\n      <div className=\"s-Grid-col ms-sm9 ms-xl9\">\n        <DetailsList items={items} columns={columns} selectionMode={0} />\n      </div>\n      <Dialog\n        isOpen={isOpen}\n        type={DialogType.close}\n        title=\"Todo Item\"\n        isBlocking={false}\n        closeButtonAriaLabel=\"Close\"\n      >\n        <form onSubmit={handleSubmit}>\n          <TextField\n            label=\"Title:\"\n            name=\"title\"\n            value={item.title}\n            onChange={handleChange}\n            styles={{ root: { maxWidth: \"300px\" } }}\n          />\n          <TextField\n            label=\"Created Date:\"\n            name=\"created_at\"\n            value={item.created_at}\n            onChange={handleChange}\n            styles={{ root: { maxWidth: \"300px\" } }}\n          />\n          <Checkbox\n            label=\"Complete\"\n            name=\"complete\"\n            onChange={() => setIsChecked(!isChecked)}\n            checked={isChecked}\n            styles={styles}\n          />\n          <DialogFooter>\n            <Button buttonType={ButtonType.primary} type=\"submit\">\n              OK\n            </Button>\n            <Button onClick={() => setIsOpen(false)}>Cancel</Button>\n          </DialogFooter>\n        </form>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return <TodoList />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}